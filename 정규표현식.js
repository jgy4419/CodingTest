// // 이 문제는.. 어디 문제인가..
// function solution(food) {
//     var answer = [];
//     let even = [];
//     for (let i = 0; i < food.length; i++){
//         if (food[i] % 2 !== 0) even.push(food[i] - 1);
//         else even.push(food[i]);
//     }
//     for (let i = 1; i < even.length; i++){
//         for (let j = 0; j < even[i] / 2; j++){
//             answer.push(i);
//         }
//     }
//     let reverse = [...answer].reverse();
//     let res = answer + '0' + reverse;
//     return res.replace(/,/g, '');
// }

// console.log(solution([1, 3, 4, 6]));

// // 다른 사람 풀이.. 
// function solution(food) {
//     let res = '';
//     for (let i = 1; i < food.length; i++) {
//         res += String(i).repeat(Math.floor(food[i]/2));
//     }

//     return res + '0' + [...res].reverse().join('');
// }


/* 
    < 정규표현식 > => https://hamait.tistory.com/342

    정규표현식에서 사용되는 기호를 Meta문자라고 표현한다. 표현식에서 내부적으로 특정 의미를 가지는 문자를 말한다.
    - ^x : x 문자로 시작됨을 의미.
    - x$ : x 문자로 종료됨을 의미한다.
    - .x : 문자열이 x 로 끝난다는 것을 의미
    - x+ : x 문자가 한번 이상 반복됨을 의미한다.
    - x? : x 문자가 존재할 수도, 존재하지 않을 수도 있음을 의미한다.
    - x* : x 문자가 0번 또는 그 이상 반복됨을 의미한다.
    - x|y : or를 표현하며 x 또는 y 문자가 존재함을 의미한다.
    - x{n} : 반복을 표현하며 x 문자가 n번 반복됨을 의미한다.
    - x{n,} : x문자가 n번 이상 반복됨을 의미한다.
    - x{n, m} : x 문자가 최소 n 번 이상 최대 m 번 이하로 반복됨을 의미한다.

    그 외에도 '[]' 는 내부에 지정된 문잦열의 범위 중에서 한 문자만을 선택한다는 특수한 의미를 가진다.
    좀 더 특별한 용도로 사용되는 것들은 다음과 같다.
    - [xy] : x와 y중에 하나를 의미한다.
    - [^xy] : not을 표현하며 x 및 y 를 제ㅚ한 문자를 의미한다.
    - [x-z] : range를 표현하며 x ~ z 사이의 문자를 의미한다.
    - \^ : ^를 문자로 사용함을 의미한다.
    - \b : 문자와 공백 사이의 문자를 의미하다.
    - \B : 문자와 공백 사이가 아닌 문자를 의미한다.
    - \d : 숫자를 의미
    - \D : 숫자가 아닌 것을 의미
    - \s : 공백 문자를 의미
    - \S : non space 를 표현하며 공백 문자가 아닌 것을 의미하다.
    - \t : 탭 문자를 의미한다.
    - \v : 수직 탭 문자를 의미한다.
    - \w : 알파벳 + 숫자 + _ 중의 한 문자임을 의미한다.
    - \W : 알파벳 + 숫자 _ 가 아닌 문자를 의미한다.
    - (?: 패턴) : 그룹화 (캡쳐 x) => (?:ko) 하면 "k"와 "o"를 그룹화한 "ko"만으로 검색하게 된다.
    - (?!) : 부정 앞쪽 일치

    정규표현식에는 Flag 라는 것이 존재하는데 사용하지 않으면 문자열에 대해서 검색을 한번만 처리하고 종료하게 된다.
    - g : 대상 문자열내에 모든 패턴들을 검색하는 것을 의미한다.
    - i : 대상 문자열에 대해서 대/소문자를 식별하지 않는 것을 의미한다.
    - m : 대상 문자열이 다중 라인의 문자열인 경우에도 검색하는 것을 의미한다.
*/

// ex) 전체에서 0~9 사이에 아무 숫자 '하나' 찾음
/[0-9]/g

// ex) 전체에서 t 또는 o를 모두 찾음
/[to]/g

// ex) 전체에서 f 따로 i 따로 찾는게 아니라 'filter' 라는 단어에 매칭되는 것을 찾음
/filter/g

// ex) 전체에서 'to'라는 단어를 빼고 다른 단어 매칭 / 확인 결과 "Tutorial" 도 제외된다.
/\b(?:(?!to)\w)+\b/g

// ex) 전체에서 'to'라는 단어를 빼고 다른 단어 매칭 / 확인결과 "Tutorial" 는 제외 안된다. (이게 더 정확)
    // \b : 문자와 공백 사이의 문자를 의미하다.
    // \w : 알파벳 + 숫자 + _ 중의 한 문자임을 의미한다.
/\b(?!\bto\b)\w+\b/

// ex) 이메일
/^[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*\.[a-zA-Z]{2:3}$/i
/* 
    '시작을' 0~9 or a-z or A-Z 알파벳 아무거나로 시작하고 중간에 -_. 같은 문자가 있을 수도 있고 없을 수도 있으며
    그 후에 0~9 사이 숫자 or a-z A-Z 알파벳중 하나 문자가 없거나 연달아 나올 수 있으며 @가 반드시 존재한다.
    0-9a-zA-Z 여기서 하나가 있고 중간에 -_. 같은 문자가 있을 수도 없을 수도 있으며 그 후에 0~9사이 숫자나 a-z나 A-Z 알바펫중 하나의
    문자가 없거나 연달아 나올 수 있으며 반드시 '.' 이 존재하고 [a-zA-Z]의 문자가 2개나 3개가 존재. ([a-zA-Z]{2:3})
    이 모든것은 대소문자 구분안한다. (i)
*/

// ex) 핸드폰 번호
/^01([0|1|6|7|8|9]?)-?([0-9]{3,4})-?([0-9]{4})$/
/* 
    - 시작을 숫자 01로 시작하며 그 후에 0,1,6,7,8,9 중에 하나가 나올 수 있다.
    - 하이픈 '-' 하나 존재할 수 있고,
    - 숫자 3~4개 이어진다.
    - 또 하이픈 '-' 하나가 존재할 수도 있으며 숫자 4개가 이어진다.
*/