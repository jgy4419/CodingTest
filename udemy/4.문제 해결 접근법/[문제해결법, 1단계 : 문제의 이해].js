/*
    < 문제 해결 법 >
    우리가 해결법을 모르는 문제를 풀기 위한 기본 접근 방식. 즉, 작업을 쉽게 수행할 수 있게 해주는 단계들을 살펴보기.
    다음으로 두 번째 단원에서는 많은 문제들을 해결할 만한 특정 상황에 응용할 수 있는 구체적인 청사진이나 원형, 전략을 살펴보기

    목표
    - 알고리즘 소개
    - 알고리즘을 해결할 계획, 비교 및 대조를 미롯한 빈도 카운터, 투 포인터, 분할정복 등을 수립하기.

    * 문제 해결 방법으로 계획 수립에 보다 초점을 두고 특정한 패턴들을 살펴보기

    알고리즘이란? : 특정 작업을 달성하기 위한 과정이나 일련의 단계를 의미한다. 즉, 문제를 해결하기 위해 수행해야 하는 수학적 단계이다.
    - 다만 알고리즘의 핵심은 어떤 작업을 달성하기 위한 일련의 단계에 불과하다.

    왜 알고리즘을 알아야 되는지? : 프로그래밍에서 수행하는 거의 모든 작업에는 아주 기본적인 작업이든 복잡한 애플리케이션을 구축하든 일종의
    알고리즘이 포함되므로 문제를 해결할 방법을 바련할 수 있도록 결정을 해야된다.
    
    어떻게 해야 알고리즘을 더 잘 이해할 수 있는지?
    - 문제 해결을 위한 계획을 수립하는 것. (기술적인 문제이면서도 아니기도 하지만 문제에 접근하는 방법, 문제를 세분화하기 위해 전략에 더 가깝다 볼 수 있다.)
    - 일반적인 문제 해결 패턴을 파악하는 것. (기존에 나와있는 자료구조, 알고리즘을 공부하면서 내 코드에 적용시켜보기) 

    Solution
    - 구체적인 예시를 보면서 문제 이해하기
    - 문제를 복습하고, 재구성하기
*/

/*
    < 문제의 이해 >
    문제를 이해하는 방법
    - 뮨제를 내 방식대로 다시 생각할 수 있는가?
    - 문제가 어떤 입력값을 담고 있는지를 이해하는 것은 매우 중요한 과정이다.
    - 문제에 대한 해결책에서 난와야 할 결과는?, 출력값 알기
    - 입력값이 출력값을 결정할 수 있을지?
    - 문제의 일부인 데이터ㅢ 중요한 부분에 어떻게 라벨을 지정할 수 있는지?

*/